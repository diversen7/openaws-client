# coding: utf-8

"""
    Stadsarkivet

    API for Stadsarkivet  # noqa: E501

    The version of the OpenAPI document: 0.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import StrictStr, constr, validator

from typing import Any, Optional

from openaws_client.models.bearer_response import BearerResponse
from openaws_client.models.body_reset_forgot_password_v1_auth_forgot_password_post import BodyResetForgotPasswordV1AuthForgotPasswordPost
from openaws_client.models.body_reset_reset_password_v1_auth_reset_password_post import BodyResetResetPasswordV1AuthResetPasswordPost
from openaws_client.models.body_verify_request_token_v1_auth_request_verify_token_post import BodyVerifyRequestTokenV1AuthRequestVerifyTokenPost
from openaws_client.models.body_verify_verify_v1_auth_verify_post import BodyVerifyVerifyV1AuthVerifyPost
from openaws_client.models.user_create import UserCreate
from openaws_client.models.user_read import UserRead

from openaws_client.api_client import ApiClient
from openaws_client.api_response import ApiResponse
from openaws_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class AuthApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def auth_db_bearer_login_v1_auth_jwt_login_post(self, username : StrictStr, password : StrictStr, grant_type : Optional[constr(strict=True)] = None, scope : Optional[StrictStr] = None, client_id : Optional[StrictStr] = None, client_secret : Optional[StrictStr] = None, **kwargs) -> BearerResponse:  # noqa: E501
        """Auth:Db Bearer.Login  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.auth_db_bearer_login_v1_auth_jwt_login_post(username, password, grant_type, scope, client_id, client_secret, async_req=True)
        >>> result = thread.get()

        :param username: (required)
        :type username: str
        :param password: (required)
        :type password: str
        :param grant_type:
        :type grant_type: str
        :param scope:
        :type scope: str
        :param client_id:
        :type client_id: str
        :param client_secret:
        :type client_secret: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: BearerResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the auth_db_bearer_login_v1_auth_jwt_login_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.auth_db_bearer_login_v1_auth_jwt_login_post_with_http_info(username, password, grant_type, scope, client_id, client_secret, **kwargs)  # noqa: E501

    @validate_arguments
    def auth_db_bearer_login_v1_auth_jwt_login_post_with_http_info(self, username : StrictStr, password : StrictStr, grant_type : Optional[constr(strict=True)] = None, scope : Optional[StrictStr] = None, client_id : Optional[StrictStr] = None, client_secret : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Auth:Db Bearer.Login  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.auth_db_bearer_login_v1_auth_jwt_login_post_with_http_info(username, password, grant_type, scope, client_id, client_secret, async_req=True)
        >>> result = thread.get()

        :param username: (required)
        :type username: str
        :param password: (required)
        :type password: str
        :param grant_type:
        :type grant_type: str
        :param scope:
        :type scope: str
        :param client_id:
        :type client_id: str
        :param client_secret:
        :type client_secret: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(BearerResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'username',
            'password',
            'grant_type',
            'scope',
            'client_id',
            'client_secret'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_db_bearer_login_v1_auth_jwt_login_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        if _params['grant_type']:
            _form_params.append(('grant_type', _params['grant_type']))

        if _params['username']:
            _form_params.append(('username', _params['username']))

        if _params['password']:
            _form_params.append(('password', _params['password']))

        if _params['scope']:
            _form_params.append(('scope', _params['scope']))

        if _params['client_id']:
            _form_params.append(('client_id', _params['client_id']))

        if _params['client_secret']:
            _form_params.append(('client_secret', _params['client_secret']))

        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/x-www-form-urlencoded']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "BearerResponse",
            '400': "ErrorModel",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/v1/auth/jwt/login', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def auth_db_bearer_logout_v1_auth_jwt_logout_post(self, **kwargs) -> object:  # noqa: E501
        """Auth:Db Bearer.Logout  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.auth_db_bearer_logout_v1_auth_jwt_logout_post(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the auth_db_bearer_logout_v1_auth_jwt_logout_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.auth_db_bearer_logout_v1_auth_jwt_logout_post_with_http_info(**kwargs)  # noqa: E501

    @validate_arguments
    def auth_db_bearer_logout_v1_auth_jwt_logout_post_with_http_info(self, **kwargs) -> ApiResponse:  # noqa: E501
        """Auth:Db Bearer.Logout  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.auth_db_bearer_logout_v1_auth_jwt_logout_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_db_bearer_logout_v1_auth_jwt_logout_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['OAuth2PasswordBearer', 'APIKeyCookie']  # noqa: E501

        _response_types_map = {
            '200': "object",
            '401': None,
        }

        return self.api_client.call_api(
            '/v1/auth/jwt/logout', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def auth_db_cookie_login_v1_auth_login_post(self, username : StrictStr, password : StrictStr, grant_type : Optional[constr(strict=True)] = None, scope : Optional[StrictStr] = None, client_id : Optional[StrictStr] = None, client_secret : Optional[StrictStr] = None, **kwargs) -> object:  # noqa: E501
        """Auth:Db Cookie.Login  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.auth_db_cookie_login_v1_auth_login_post(username, password, grant_type, scope, client_id, client_secret, async_req=True)
        >>> result = thread.get()

        :param username: (required)
        :type username: str
        :param password: (required)
        :type password: str
        :param grant_type:
        :type grant_type: str
        :param scope:
        :type scope: str
        :param client_id:
        :type client_id: str
        :param client_secret:
        :type client_secret: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the auth_db_cookie_login_v1_auth_login_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.auth_db_cookie_login_v1_auth_login_post_with_http_info(username, password, grant_type, scope, client_id, client_secret, **kwargs)  # noqa: E501

    @validate_arguments
    def auth_db_cookie_login_v1_auth_login_post_with_http_info(self, username : StrictStr, password : StrictStr, grant_type : Optional[constr(strict=True)] = None, scope : Optional[StrictStr] = None, client_id : Optional[StrictStr] = None, client_secret : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Auth:Db Cookie.Login  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.auth_db_cookie_login_v1_auth_login_post_with_http_info(username, password, grant_type, scope, client_id, client_secret, async_req=True)
        >>> result = thread.get()

        :param username: (required)
        :type username: str
        :param password: (required)
        :type password: str
        :param grant_type:
        :type grant_type: str
        :param scope:
        :type scope: str
        :param client_id:
        :type client_id: str
        :param client_secret:
        :type client_secret: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'username',
            'password',
            'grant_type',
            'scope',
            'client_id',
            'client_secret'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_db_cookie_login_v1_auth_login_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        if _params['grant_type']:
            _form_params.append(('grant_type', _params['grant_type']))

        if _params['username']:
            _form_params.append(('username', _params['username']))

        if _params['password']:
            _form_params.append(('password', _params['password']))

        if _params['scope']:
            _form_params.append(('scope', _params['scope']))

        if _params['client_id']:
            _form_params.append(('client_id', _params['client_id']))

        if _params['client_secret']:
            _form_params.append(('client_secret', _params['client_secret']))

        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/x-www-form-urlencoded']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "object",
            '400': "ErrorModel",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/v1/auth/login', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def auth_db_cookie_logout_v1_auth_logout_post(self, **kwargs) -> object:  # noqa: E501
        """Auth:Db Cookie.Logout  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.auth_db_cookie_logout_v1_auth_logout_post(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the auth_db_cookie_logout_v1_auth_logout_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.auth_db_cookie_logout_v1_auth_logout_post_with_http_info(**kwargs)  # noqa: E501

    @validate_arguments
    def auth_db_cookie_logout_v1_auth_logout_post_with_http_info(self, **kwargs) -> ApiResponse:  # noqa: E501
        """Auth:Db Cookie.Logout  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.auth_db_cookie_logout_v1_auth_logout_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_db_cookie_logout_v1_auth_logout_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['OAuth2PasswordBearer', 'APIKeyCookie']  # noqa: E501

        _response_types_map = {
            '200': "object",
            '401': None,
        }

        return self.api_client.call_api(
            '/v1/auth/logout', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def register_register_v1_auth_register_post(self, user_create : UserCreate, **kwargs) -> UserRead:  # noqa: E501
        """Register:Register  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.register_register_v1_auth_register_post(user_create, async_req=True)
        >>> result = thread.get()

        :param user_create: (required)
        :type user_create: UserCreate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: UserRead
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the register_register_v1_auth_register_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.register_register_v1_auth_register_post_with_http_info(user_create, **kwargs)  # noqa: E501

    @validate_arguments
    def register_register_v1_auth_register_post_with_http_info(self, user_create : UserCreate, **kwargs) -> ApiResponse:  # noqa: E501
        """Register:Register  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.register_register_v1_auth_register_post_with_http_info(user_create, async_req=True)
        >>> result = thread.get()

        :param user_create: (required)
        :type user_create: UserCreate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(UserRead, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'user_create'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method register_register_v1_auth_register_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['user_create'] is not None:
            _body_params = _params['user_create']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '201': "UserRead",
            '400': "ErrorModel",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/v1/auth/register', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def reset_forgot_password_v1_auth_forgot_password_post(self, body_reset_forgot_password_v1_auth_forgot_password_post : BodyResetForgotPasswordV1AuthForgotPasswordPost, **kwargs) -> object:  # noqa: E501
        """Reset:Forgot Password  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.reset_forgot_password_v1_auth_forgot_password_post(body_reset_forgot_password_v1_auth_forgot_password_post, async_req=True)
        >>> result = thread.get()

        :param body_reset_forgot_password_v1_auth_forgot_password_post: (required)
        :type body_reset_forgot_password_v1_auth_forgot_password_post: BodyResetForgotPasswordV1AuthForgotPasswordPost
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the reset_forgot_password_v1_auth_forgot_password_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.reset_forgot_password_v1_auth_forgot_password_post_with_http_info(body_reset_forgot_password_v1_auth_forgot_password_post, **kwargs)  # noqa: E501

    @validate_arguments
    def reset_forgot_password_v1_auth_forgot_password_post_with_http_info(self, body_reset_forgot_password_v1_auth_forgot_password_post : BodyResetForgotPasswordV1AuthForgotPasswordPost, **kwargs) -> ApiResponse:  # noqa: E501
        """Reset:Forgot Password  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.reset_forgot_password_v1_auth_forgot_password_post_with_http_info(body_reset_forgot_password_v1_auth_forgot_password_post, async_req=True)
        >>> result = thread.get()

        :param body_reset_forgot_password_v1_auth_forgot_password_post: (required)
        :type body_reset_forgot_password_v1_auth_forgot_password_post: BodyResetForgotPasswordV1AuthForgotPasswordPost
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'body_reset_forgot_password_v1_auth_forgot_password_post'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reset_forgot_password_v1_auth_forgot_password_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body_reset_forgot_password_v1_auth_forgot_password_post'] is not None:
            _body_params = _params['body_reset_forgot_password_v1_auth_forgot_password_post']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '202': "object",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/v1/auth/forgot-password', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def reset_reset_password_v1_auth_reset_password_post(self, body_reset_reset_password_v1_auth_reset_password_post : BodyResetResetPasswordV1AuthResetPasswordPost, **kwargs) -> object:  # noqa: E501
        """Reset:Reset Password  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.reset_reset_password_v1_auth_reset_password_post(body_reset_reset_password_v1_auth_reset_password_post, async_req=True)
        >>> result = thread.get()

        :param body_reset_reset_password_v1_auth_reset_password_post: (required)
        :type body_reset_reset_password_v1_auth_reset_password_post: BodyResetResetPasswordV1AuthResetPasswordPost
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the reset_reset_password_v1_auth_reset_password_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.reset_reset_password_v1_auth_reset_password_post_with_http_info(body_reset_reset_password_v1_auth_reset_password_post, **kwargs)  # noqa: E501

    @validate_arguments
    def reset_reset_password_v1_auth_reset_password_post_with_http_info(self, body_reset_reset_password_v1_auth_reset_password_post : BodyResetResetPasswordV1AuthResetPasswordPost, **kwargs) -> ApiResponse:  # noqa: E501
        """Reset:Reset Password  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.reset_reset_password_v1_auth_reset_password_post_with_http_info(body_reset_reset_password_v1_auth_reset_password_post, async_req=True)
        >>> result = thread.get()

        :param body_reset_reset_password_v1_auth_reset_password_post: (required)
        :type body_reset_reset_password_v1_auth_reset_password_post: BodyResetResetPasswordV1AuthResetPasswordPost
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'body_reset_reset_password_v1_auth_reset_password_post'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reset_reset_password_v1_auth_reset_password_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body_reset_reset_password_v1_auth_reset_password_post'] is not None:
            _body_params = _params['body_reset_reset_password_v1_auth_reset_password_post']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "object",
            '400': "ErrorModel",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/v1/auth/reset-password', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def verify_request_token_v1_auth_request_verify_token_post(self, body_verify_request_token_v1_auth_request_verify_token_post : BodyVerifyRequestTokenV1AuthRequestVerifyTokenPost, **kwargs) -> object:  # noqa: E501
        """Verify:Request-Token  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.verify_request_token_v1_auth_request_verify_token_post(body_verify_request_token_v1_auth_request_verify_token_post, async_req=True)
        >>> result = thread.get()

        :param body_verify_request_token_v1_auth_request_verify_token_post: (required)
        :type body_verify_request_token_v1_auth_request_verify_token_post: BodyVerifyRequestTokenV1AuthRequestVerifyTokenPost
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the verify_request_token_v1_auth_request_verify_token_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.verify_request_token_v1_auth_request_verify_token_post_with_http_info(body_verify_request_token_v1_auth_request_verify_token_post, **kwargs)  # noqa: E501

    @validate_arguments
    def verify_request_token_v1_auth_request_verify_token_post_with_http_info(self, body_verify_request_token_v1_auth_request_verify_token_post : BodyVerifyRequestTokenV1AuthRequestVerifyTokenPost, **kwargs) -> ApiResponse:  # noqa: E501
        """Verify:Request-Token  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.verify_request_token_v1_auth_request_verify_token_post_with_http_info(body_verify_request_token_v1_auth_request_verify_token_post, async_req=True)
        >>> result = thread.get()

        :param body_verify_request_token_v1_auth_request_verify_token_post: (required)
        :type body_verify_request_token_v1_auth_request_verify_token_post: BodyVerifyRequestTokenV1AuthRequestVerifyTokenPost
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'body_verify_request_token_v1_auth_request_verify_token_post'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method verify_request_token_v1_auth_request_verify_token_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body_verify_request_token_v1_auth_request_verify_token_post'] is not None:
            _body_params = _params['body_verify_request_token_v1_auth_request_verify_token_post']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '202': "object",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/v1/auth/request-verify-token', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def verify_verify_v1_auth_verify_post(self, body_verify_verify_v1_auth_verify_post : BodyVerifyVerifyV1AuthVerifyPost, **kwargs) -> UserRead:  # noqa: E501
        """Verify:Verify  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.verify_verify_v1_auth_verify_post(body_verify_verify_v1_auth_verify_post, async_req=True)
        >>> result = thread.get()

        :param body_verify_verify_v1_auth_verify_post: (required)
        :type body_verify_verify_v1_auth_verify_post: BodyVerifyVerifyV1AuthVerifyPost
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: UserRead
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the verify_verify_v1_auth_verify_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.verify_verify_v1_auth_verify_post_with_http_info(body_verify_verify_v1_auth_verify_post, **kwargs)  # noqa: E501

    @validate_arguments
    def verify_verify_v1_auth_verify_post_with_http_info(self, body_verify_verify_v1_auth_verify_post : BodyVerifyVerifyV1AuthVerifyPost, **kwargs) -> ApiResponse:  # noqa: E501
        """Verify:Verify  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.verify_verify_v1_auth_verify_post_with_http_info(body_verify_verify_v1_auth_verify_post, async_req=True)
        >>> result = thread.get()

        :param body_verify_verify_v1_auth_verify_post: (required)
        :type body_verify_verify_v1_auth_verify_post: BodyVerifyVerifyV1AuthVerifyPost
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(UserRead, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'body_verify_verify_v1_auth_verify_post'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method verify_verify_v1_auth_verify_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body_verify_verify_v1_auth_verify_post'] is not None:
            _body_params = _params['body_verify_verify_v1_auth_verify_post']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "UserRead",
            '400': "ErrorModel",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/v1/auth/verify', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
