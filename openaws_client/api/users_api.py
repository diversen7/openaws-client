# coding: utf-8

"""
    Stadsarkivet

    API for Stadsarkivet  # noqa: E501

    The version of the OpenAPI document: 0.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import StrictBool, StrictInt, StrictStr

from typing import Any, List, Optional

from openaws_client.models.user_read import UserRead
from openaws_client.models.user_update import UserUpdate
from openaws_client.models.user_update_permissions import UserUpdatePermissions

from openaws_client.api_client import ApiClient
from openaws_client.api_response import ApiResponse
from openaws_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class UsersApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def users_current_user_v1_users_me_get(self, **kwargs) -> UserRead:  # noqa: E501
        """Users:Current User  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.users_current_user_v1_users_me_get(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: UserRead
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the users_current_user_v1_users_me_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.users_current_user_v1_users_me_get_with_http_info(**kwargs)  # noqa: E501

    @validate_arguments
    def users_current_user_v1_users_me_get_with_http_info(self, **kwargs) -> ApiResponse:  # noqa: E501
        """Users:Current User  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.users_current_user_v1_users_me_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(UserRead, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_current_user_v1_users_me_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['OAuth2PasswordBearer', 'APIKeyCookie']  # noqa: E501

        _response_types_map = {
            '200': "UserRead",
            '401': None,
        }

        return self.api_client.call_api(
            '/v1/users/me', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def users_list_users_v1_users_get(self, pattern : Optional[StrictStr] = None, limit : Optional[StrictInt] = None, offset : Optional[StrictInt] = None, order : Optional[StrictStr] = None, descending : Optional[StrictBool] = None, is_active : Optional[StrictBool] = None, is_verified : Optional[StrictBool] = None, is_employee : Optional[StrictBool] = None, is_admin : Optional[StrictBool] = None, **kwargs) -> List[UserRead]:  # noqa: E501
        """Users:List Users  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.users_list_users_v1_users_get(pattern, limit, offset, order, descending, is_active, is_verified, is_employee, is_admin, async_req=True)
        >>> result = thread.get()

        :param pattern:
        :type pattern: str
        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param order:
        :type order: str
        :param descending:
        :type descending: bool
        :param is_active:
        :type is_active: bool
        :param is_verified:
        :type is_verified: bool
        :param is_employee:
        :type is_employee: bool
        :param is_admin:
        :type is_admin: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[UserRead]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the users_list_users_v1_users_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.users_list_users_v1_users_get_with_http_info(pattern, limit, offset, order, descending, is_active, is_verified, is_employee, is_admin, **kwargs)  # noqa: E501

    @validate_arguments
    def users_list_users_v1_users_get_with_http_info(self, pattern : Optional[StrictStr] = None, limit : Optional[StrictInt] = None, offset : Optional[StrictInt] = None, order : Optional[StrictStr] = None, descending : Optional[StrictBool] = None, is_active : Optional[StrictBool] = None, is_verified : Optional[StrictBool] = None, is_employee : Optional[StrictBool] = None, is_admin : Optional[StrictBool] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Users:List Users  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.users_list_users_v1_users_get_with_http_info(pattern, limit, offset, order, descending, is_active, is_verified, is_employee, is_admin, async_req=True)
        >>> result = thread.get()

        :param pattern:
        :type pattern: str
        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param order:
        :type order: str
        :param descending:
        :type descending: bool
        :param is_active:
        :type is_active: bool
        :param is_verified:
        :type is_verified: bool
        :param is_employee:
        :type is_employee: bool
        :param is_admin:
        :type is_admin: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[UserRead], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pattern',
            'limit',
            'offset',
            'order',
            'descending',
            'is_active',
            'is_verified',
            'is_employee',
            'is_admin'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_list_users_v1_users_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('pattern') is not None:  # noqa: E501
            _query_params.append(('pattern', _params['pattern']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('offset') is not None:  # noqa: E501
            _query_params.append(('offset', _params['offset']))

        if _params.get('order') is not None:  # noqa: E501
            _query_params.append(('order', _params['order']))

        if _params.get('descending') is not None:  # noqa: E501
            _query_params.append(('descending', _params['descending']))

        if _params.get('is_active') is not None:  # noqa: E501
            _query_params.append(('is_active', _params['is_active']))

        if _params.get('is_verified') is not None:  # noqa: E501
            _query_params.append(('is_verified', _params['is_verified']))

        if _params.get('is_employee') is not None:  # noqa: E501
            _query_params.append(('is_employee', _params['is_employee']))

        if _params.get('is_admin') is not None:  # noqa: E501
            _query_params.append(('is_admin', _params['is_admin']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['OAuth2PasswordBearer', 'APIKeyCookie']  # noqa: E501

        _response_types_map = {
            '200': "List[UserRead]",
            '400': None,
            '403': None,
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/v1/users/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def users_patch_current_user_v1_users_me_patch(self, user_update : UserUpdate, **kwargs) -> UserRead:  # noqa: E501
        """Users:Patch Current User  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.users_patch_current_user_v1_users_me_patch(user_update, async_req=True)
        >>> result = thread.get()

        :param user_update: (required)
        :type user_update: UserUpdate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: UserRead
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the users_patch_current_user_v1_users_me_patch_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.users_patch_current_user_v1_users_me_patch_with_http_info(user_update, **kwargs)  # noqa: E501

    @validate_arguments
    def users_patch_current_user_v1_users_me_patch_with_http_info(self, user_update : UserUpdate, **kwargs) -> ApiResponse:  # noqa: E501
        """Users:Patch Current User  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.users_patch_current_user_v1_users_me_patch_with_http_info(user_update, async_req=True)
        >>> result = thread.get()

        :param user_update: (required)
        :type user_update: UserUpdate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(UserRead, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'user_update'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_patch_current_user_v1_users_me_patch" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['user_update'] is not None:
            _body_params = _params['user_update']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['OAuth2PasswordBearer', 'APIKeyCookie']  # noqa: E501

        _response_types_map = {
            '200': "UserRead",
            '401': None,
            '400': "ErrorModel",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/v1/users/me', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def users_patch_user_permissions_v1_users_id_permissions_patch(self, id : Any, user_update_permissions : UserUpdatePermissions, **kwargs) -> UserRead:  # noqa: E501
        """Users:Patch User Permissions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.users_patch_user_permissions_v1_users_id_permissions_patch(id, user_update_permissions, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: object
        :param user_update_permissions: (required)
        :type user_update_permissions: UserUpdatePermissions
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: UserRead
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the users_patch_user_permissions_v1_users_id_permissions_patch_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.users_patch_user_permissions_v1_users_id_permissions_patch_with_http_info(id, user_update_permissions, **kwargs)  # noqa: E501

    @validate_arguments
    def users_patch_user_permissions_v1_users_id_permissions_patch_with_http_info(self, id : Any, user_update_permissions : UserUpdatePermissions, **kwargs) -> ApiResponse:  # noqa: E501
        """Users:Patch User Permissions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.users_patch_user_permissions_v1_users_id_permissions_patch_with_http_info(id, user_update_permissions, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: object
        :param user_update_permissions: (required)
        :type user_update_permissions: UserUpdatePermissions
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(UserRead, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'user_update_permissions'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_patch_user_permissions_v1_users_id_permissions_patch" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['user_update_permissions'] is not None:
            _body_params = _params['user_update_permissions']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['OAuth2PasswordBearer', 'APIKeyCookie']  # noqa: E501

        _response_types_map = {
            '200': "UserRead",
            '401': None,
            '403': None,
            '404': None,
            '400': None,
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/v1/users/{id}/permissions', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
