# coding: utf-8

"""
    Stadsarkivet

    API for Stadsarkivet  # noqa: E501

    The version of the OpenAPI document: 0.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime

from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from openaws_client.models.status_flag import StatusFlag

class EntityVersionRead(BaseModel):
    """
    EntityVersionRead
    """
    id: StrictInt = Field(...)
    uuid: StrictStr = Field(...)
    status: StatusFlag = Field(...)
    schema_name: StrictStr = Field(...)
    timestamp: datetime = Field(...)
    updated_by_id: StrictStr = Field(...)
    is_soft_deleted: StrictBool = Field(...)
    is_hard_deleted: StrictBool = Field(...)
    __properties = ["id", "uuid", "status", "schema_name", "timestamp", "updated_by_id", "is_soft_deleted", "is_hard_deleted"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EntityVersionRead:
        """Create an instance of EntityVersionRead from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EntityVersionRead:
        """Create an instance of EntityVersionRead from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EntityVersionRead.parse_obj(obj)

        _obj = EntityVersionRead.parse_obj({
            "id": obj.get("id"),
            "uuid": obj.get("uuid"),
            "status": obj.get("status"),
            "schema_name": obj.get("schema_name"),
            "timestamp": obj.get("timestamp"),
            "updated_by_id": obj.get("updated_by_id"),
            "is_soft_deleted": obj.get("is_soft_deleted"),
            "is_hard_deleted": obj.get("is_hard_deleted")
        })
        return _obj

