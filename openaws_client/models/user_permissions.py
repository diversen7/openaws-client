# coding: utf-8

"""
    Stadsarkivet

    API for Stadsarkivet  # noqa: E501

    The version of the OpenAPI document: 0.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictBool

class UserPermissions(BaseModel):
    """
    UserPermissions
    """
    guest: Optional[StrictBool] = False
    basic: Optional[StrictBool] = False
    employee: Optional[StrictBool] = False
    admin: Optional[StrictBool] = False
    __properties = ["guest", "basic", "employee", "admin"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UserPermissions:
        """Create an instance of UserPermissions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UserPermissions:
        """Create an instance of UserPermissions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UserPermissions.parse_obj(obj)

        _obj = UserPermissions.parse_obj({
            "guest": obj.get("guest") if obj.get("guest") is not None else False,
            "basic": obj.get("basic") if obj.get("basic") is not None else False,
            "employee": obj.get("employee") if obj.get("employee") is not None else False,
            "admin": obj.get("admin") if obj.get("admin") is not None else False
        })
        return _obj

