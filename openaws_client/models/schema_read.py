# coding: utf-8

"""
    Stadsarkivet

    API for Stadsarkivet  # noqa: E501

    The version of the OpenAPI document: 0.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict
from pydantic import BaseModel, Field, StrictInt, StrictStr

class SchemaRead(BaseModel):
    """
    SchemaRead
    """
    type: StrictStr = Field(...)
    data: Dict[str, Any] = Field(...)
    name: StrictStr = Field(...)
    version: StrictInt = Field(...)
    created_by_id: StrictStr = Field(...)
    timestamp: datetime = Field(...)
    __properties = ["type", "data", "name", "version", "created_by_id", "timestamp"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SchemaRead:
        """Create an instance of SchemaRead from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SchemaRead:
        """Create an instance of SchemaRead from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SchemaRead.parse_obj(obj)

        _obj = SchemaRead.parse_obj({
            "type": obj.get("type"),
            "data": obj.get("data"),
            "name": obj.get("name"),
            "version": obj.get("version"),
            "created_by_id": obj.get("created_by_id"),
            "timestamp": obj.get("timestamp")
        })
        return _obj

